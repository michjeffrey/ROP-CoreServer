"use strict";
/**
 *  Copyright 2022 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createColorfulTTYDriver = void 0;
const BG_COLOR_ENDING = '\x1B[49m';
const FORE_COLOR_ENDING = '\x1B[39m';
function nonColorfulWriter(text) {
    console.log(text);
}
const FORE_COLORS = {
    'default': '',
    'blue': '\u001b[34m',
    'cyan': '\u001b[36m',
    'green': '\u001b[32m',
    'magenta': '\u001b[35m',
    'red': '\u001b[31m',
    'yellow': '\u001b[33m',
    'white': '\u001b[37m',
    'grey': '\u001b[90m',
    'black': '\u001b[30m'
};
const BG_COLORS = {
    'default': '',
    'white': '\u001b[47m',
    'grey': '\u001b[49;5;8m',
    'black': '\u001b[40m',
    'blue': '\u001b[44m',
    'cyan': '\u001b[46m',
    'green': '\u001b[42m',
    'magenta': '\u001b[45m',
    'red': '\u001b[41m',
    'yellow': '\u001b[43m'
};
/**
 * This ugly line is due to the breaking changes after TypeScript 2.9.x.
 *
 * @see https://github.com/Microsoft/TypeScript/issues/24587
 */
const DEFAULT_LEVEL = Symbol('__default__');
class ColorfulTTYDriver {
    constructor() {
        this._bgColors = {
            [DEFAULT_LEVEL]: 'default'
        };
        this._foreColors = {
            [DEFAULT_LEVEL]: 'default'
        };
        this._levels = {
            [DEFAULT_LEVEL]: {
                start: '',
                end: ''
            }
        };
        this.write = this._buildWriter();
    }
    bgColor(color, level) {
        this._bgColors[level || DEFAULT_LEVEL] = color === 'default' ?
            '' : BG_COLORS[color];
        this._rebuild(level || DEFAULT_LEVEL);
        return this;
    }
    foreColor(color, level) {
        this._foreColors[level || DEFAULT_LEVEL] = color === 'default' ?
            '' : FORE_COLORS[color];
        this._rebuild(level || DEFAULT_LEVEL);
        return this;
    }
    _rebuild(level /* | symbol*/) {
        let start = '';
        let end = '';
        if (this._foreColors[level]) {
            start += this._foreColors[level] || '';
            end = FORE_COLOR_ENDING + end;
        }
        if (this._bgColors[level]) {
            start += this._bgColors[level] || '';
            end = BG_COLOR_ENDING + end;
        }
        this._levels[level] = { start, end };
    }
    write() {
        return;
    }
    flush() {
        // do nothing.
    }
    close() {
        // do nothing.
    }
    static isTerminal() {
        return this.isNodeJS() && (process.stdout.isTTY ||
            process.stdout.constructor.name === 'Socket' // Debugging
        );
    }
    static isNodeJS() {
        try {
            return typeof process.stdout === 'object';
        }
        catch (_a) {
            return false;
        }
    }
    _buildWriter() {
        if (ColorfulTTYDriver.isTerminal()) {
            return this._buildWriterForTerminal();
        }
        return nonColorfulWriter;
    }
    _buildWriterForTerminal() {
        const cs = [];
        cs.push('return function(text, subject, level, date) {');
        cs.push('const dec = this._levels[level] || this._levels[DEFAULT_LEVEL];');
        cs.push('return console.log(');
        cs.push('    text.split("\\n").map(');
        cs.push('       (x) => `${dec.start}${x}${dec.end}`');
        cs.push('    ).join("\\n")');
        cs.push(');');
        cs.push('};');
        return (new Function('DEFAULT_LEVEL', cs.join('\n')))(DEFAULT_LEVEL);
    }
}
/**
 * Create a colorful-tty driver.
 */
function createColorfulTTYDriver() {
    if (!ColorfulTTYDriver.isTerminal()) {
        console.warn('The ColorfulTTYDriver is only usable in Node.JS terminal.');
    }
    return new ColorfulTTYDriver();
}
exports.createColorfulTTYDriver = createColorfulTTYDriver;
//# sourceMappingURL=ColorfulTTY.js.map