/**
 * Copyright 2022 Angus Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as C from './Common';
export interface IInlineCompileOptions extends C.ICompileOptions {
    /**
     * Added `debugger` statement before executing checking code.
     */
    'stopOnEntry'?: boolean;
}
export interface IInlineCompiler {
    /**
     * Compile the rule and wrap the result into a JavaScript function, so that
     * it could be invoked directly.
     *
     * @param options The options of compilation.
     */
    compile<T>(options: IInlineCompileOptions): C.ITypeChecker<T>;
    /**
     * Get the type-checker of a pre-defined type.
     *
     * @param name The name of the pre-defined type.
     */
    getPredefinedType<T>(name: string): C.ITypeChecker<T>;
    /**
     * Register a pre-defined type checker.
     *
     * @param name      The name of the pre-defined type (without prefix `@`)
     * @param checker   The checker callback of the pre-defined type.
     */
    addPredefinedType<T>(name: string, checker: C.ITypeChecker<T>): this;
    /**
     * Check if a pre-defined type is compiled.
     *
     * @param name The name of the pre-defined type.
     */
    hasPredefinedType(name: string): boolean;
    /**
     * Get the names list of undefined but referred pre-defined types.
     */
    detectUndefinedTypes(): string[];
}
/**
 * Create a compiler object that compiles the rule into JavaScript lambda code.
 */
export declare function createInlineCompiler(): IInlineCompiler;
//# sourceMappingURL=InlineCompiler.d.ts.map