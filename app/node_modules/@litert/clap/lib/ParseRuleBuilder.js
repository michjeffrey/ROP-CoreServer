"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseRuleBuilder = void 0;
const ParseRules_1 = require("./ParseRules");
class ParseRuleBuilder {
    constructor(_opts, info, _rules = new ParseRules_1.ParseRulesVessel(info, undefined)) {
        this._opts = _opts;
        this._rules = _rules;
        if (!_opts.disableHelpFlag) {
            this.addFlag({
                'name': 'help',
                'shortcut': _opts.disableHelpFlagShortcut ? undefined : 'h',
            });
        }
    }
    setMaxArguments(qty) {
        this._rules.info.maxArguments = qty;
        return this;
    }
    setMinArguments(qty) {
        this._rules.info.minArguments = qty;
        return this;
    }
    addCommand(opts, processor) {
        this._rules.addCommand(opts);
        if (!this._rules.parent
            && !this._rules.existCommand('help')
            && !this._opts.disableHelpCommand) {
            this.addCommand({ name: 'help' });
        }
        return processor ? this.with(opts.name, processor) : this;
    }
    addOption(opts) {
        this._rules.addOption(opts);
        return this;
    }
    addFlag(opts) {
        this._rules.addFlag(opts);
        return this;
    }
    with(command, cb) {
        const cmd = this._rules.getCommandRules(command);
        cb(new ParseRuleBuilder(this._opts, cmd.info, cmd));
        return this;
    }
}
exports.ParseRuleBuilder = ParseRuleBuilder;
//# sourceMappingURL=ParseRuleBuilder.js.map