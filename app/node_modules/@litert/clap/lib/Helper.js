"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHelper = void 0;
const EnglishLangPkg_1 = require("./EnglishLangPkg");
const HelpGenerator_1 = require("./HelpGenerator");
const Parser_1 = require("./Parser");
const ParseRuleBuilder_1 = require("./ParseRuleBuilder");
class ClapHelper extends ParseRuleBuilder_1.ParseRuleBuilder {
    constructor(title, command, description, opts, _lang) {
        super(opts, {
            name: command,
            description
        });
        this._lang = _lang;
        this._helpGen = new HelpGenerator_1.HelpGenerator(title, command, opts, this._rules, this._lang);
        this._parser = new Parser_1.ClapParser(opts, this._rules, this._helpGen);
    }
    isHelpRequest(result) {
        return this._helpGen.isHelpRequest(result);
    }
    generateHelpOutput(result) {
        return this._helpGen.generate(result);
    }
    generateErrorOutput(e) {
        return this._helpGen.generateErrorOutput(e);
    }
    parseAndProcess(args) {
        try {
            const result = this.parse(args);
            if (this.isHelpRequest(result)) {
                return this.generateHelpOutput(result);
            }
            return result;
        }
        catch (e) {
            return this.generateErrorOutput(e);
        }
    }
    parse(args) {
        return this._parser.parse(args);
    }
}
const DEFAULT_PREFERENCES = {
    'disableFlagsAfterArguments': false,
    'disableHelpCommand': false,
    'disableHelpFlag': false,
    'disableHelpFlagShortcut': false,
    'disableOptionAssignMode': false,
    'disableOptionAttachMode': false,
    'disableOptionFollowMode': false
};
function createHelper(opts) {
    var _a;
    return new ClapHelper(opts.title, opts.command, opts.description, Object.assign(Object.assign({}, DEFAULT_PREFERENCES), opts.preferences), (_a = opts.languagePackage) !== null && _a !== void 0 ? _a : EnglishLangPkg_1.ENGLISH_LANG_PACKAGE);
}
exports.createHelper = createHelper;
//# sourceMappingURL=Helper.js.map