/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import * as C from './Common';
export declare enum EFlagType {
    FLAG = 0,
    OPTION = 1
}
export declare class ParseRulesVessel {
    readonly parent?: ParseRulesVessel | undefined;
    private _flagLikeEntries;
    private _flagLikeShortcut2Name;
    private _cmdShortcut2Name;
    private _flags;
    private _options;
    private _commands;
    readonly info: Required<C.ICommandConfig>;
    constructor(
    /**
     * The config of command bound with current rules vessel.
     */
    info: C.ICommandConfig, parent?: ParseRulesVessel | undefined);
    get isCommandMode(): boolean;
    get countOptions(): number;
    get countFlags(): number;
    get isRoot(): boolean;
    getCommandNames(): string[];
    getOptionNames(): string[];
    getFlagNames(): string[];
    protected _toIndexFlagName(name: string): string;
    protected _toIndexCommandName(name: string): string;
    existCommand(name: string): boolean;
    existOption(name: string): boolean;
    existFlag(name: string): boolean;
    getCommandRules(name: string): ParseRulesVessel;
    getOption(name: string): C.IOptionConfig;
    getFlag(name: string): C.IFlagConfig;
    /**
     * Tell if a name or shortcut for command is usable or not.
     */
    isUnusedCommandNameOrShortcut(name: string): boolean;
    /**
     * Tell if a name or shortcut for both flag and option is usable or not.
     */
    isUnusedFlagLikeNameOrShortcut(name: string): boolean;
    addFlag(opts: C.IFlagConfig): void;
    addOption(opts: C.IOptionConfig): void;
    addCommand(opts: C.ICommandConfig): void;
}
//# sourceMappingURL=ParseRules.d.ts.map