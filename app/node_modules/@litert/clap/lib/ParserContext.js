"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserContext = exports.EParserStatus = void 0;
var EParserStatus;
(function (EParserStatus) {
    EParserStatus[EParserStatus["IDLE"] = 0] = "IDLE";
    EParserStatus[EParserStatus["READING_COMMAND"] = 1] = "READING_COMMAND";
    EParserStatus[EParserStatus["READING_ARGUMENTS"] = 2] = "READING_ARGUMENTS";
    EParserStatus[EParserStatus["READING_OPTION_ARG"] = 3] = "READING_OPTION_ARG";
})(EParserStatus = exports.EParserStatus || (exports.EParserStatus = {}));
class ParserContext {
    constructor(rules, _opts, args) {
        this.rules = rules;
        this._opts = _opts;
        this.args = args;
        this.status = EParserStatus.IDLE;
        this.data = {};
        this._result = {
            successful: false,
            commands: [],
            options: {},
            flags: {},
            arguments: [],
            tailingArguments: [],
            unknownFlags: []
        };
        this.cursor = 0;
        if (this.rules.isCommandMode) {
            this.status = EParserStatus.READING_COMMAND;
        }
        else {
            this.status = EParserStatus.READING_ARGUMENTS;
        }
    }
    getCurrentPiece() {
        return this.args[this.cursor];
    }
    end() {
        this.cursor = this.args.length;
    }
    next() {
        return ++this.cursor < this.args.length;
    }
    saveArgument(argument) {
        if (this.rules.info.maxArguments !== -1 && this.countArguments() >= this.rules.info.maxArguments) {
            this._result.tailingArguments.push(argument);
        }
        else {
            this._result.arguments.push(argument);
        }
    }
    saveTailingArguments(argument) {
        this._result.tailingArguments.push(...argument);
    }
    complete() {
        this._result.successful = true;
    }
    getResult() {
        return this._result;
    }
    saveOption(option, value) {
        var _a;
        if (option.multiple) {
            this._result.options[option.name] = [
                ...((_a = this._result.options[option.name]) !== null && _a !== void 0 ? _a : []),
                value
            ];
        }
        else {
            this._result.options[option.name] = [value];
        }
    }
    saveFlag(flag) {
        var _a;
        this._result.flags[flag.name] = ((_a = this._result.flags[flag.name]) !== null && _a !== void 0 ? _a : 0) + 1;
        if (flag.name.toLowerCase() === 'help' && !this._opts.disableHelpFlag) {
            this.end();
        }
    }
    saveUnknownFlag(expr) {
        if (!this._result.unknownFlags.includes(expr)) {
            this._result.unknownFlags.push(expr);
        }
    }
    saveCommand(commandName) {
        this.rules = this.rules.getCommandRules(commandName);
        this._result.commands.push(this.rules.info.name);
    }
    resetStatus() {
        if (!this.rules.isCommandMode) {
            this.status = EParserStatus.READING_ARGUMENTS;
        }
    }
    countArguments() {
        return this._result.arguments.length + this._result.tailingArguments.length;
    }
}
exports.ParserContext = ParserContext;
//# sourceMappingURL=ParserContext.js.map