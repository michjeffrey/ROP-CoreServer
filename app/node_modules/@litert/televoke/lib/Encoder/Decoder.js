"use strict";
/**
 * Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDecoder = void 0;
const GE = require("../Errors");
const C = require("../Common");
class Decoder {
    constructor() {
        this._plBuf = Buffer.allocUnsafe(4);
        this._plBufLength = 0;
        this._buf = Buffer.allocUnsafe(65536);
        this.reset();
    }
    reset() {
        this._bufLength = 0;
        this._packetLength = 0;
    }
    decode(chunk) {
        while (1) {
            if (!chunk.length) {
                break;
            }
            if (this._packetLength) {
                if (!this._bufLength && chunk.length >= this._packetLength) {
                    let data;
                    try {
                        data = JSON.parse(chunk.slice(0, this._packetLength).toString());
                    }
                    catch (e) {
                        this.reset();
                        this.onProtocolError(e);
                        return;
                    }
                    chunk = chunk.slice(this._packetLength);
                    this.reset();
                    try {
                        this.onData(data);
                    }
                    catch (e) {
                        this.onLogicError(e);
                    }
                    continue;
                }
                if (chunk.length + this._bufLength >= this._packetLength) {
                    let restLength = this._packetLength - this._bufLength;
                    chunk.copy(this._buf, this._bufLength, 0, this._packetLength - this._bufLength);
                    chunk = chunk.slice(restLength);
                    let data;
                    try {
                        data = JSON.parse(this._buf.slice(0, this._packetLength).toString());
                    }
                    catch (e) {
                        this.reset();
                        this.onProtocolError(e);
                        return;
                    }
                    this.reset();
                    try {
                        this.onData(data);
                    }
                    catch (e) {
                        this.onLogicError(e);
                    }
                }
                else {
                    chunk.copy(this._buf, this._bufLength);
                    this._bufLength += chunk.length;
                    return;
                }
            }
            else {
                if (this._plBufLength) {
                    if (this._plBufLength + chunk.byteLength >= 4) {
                        chunk.copy(this._plBuf, this._plBufLength, 0, 4 - this._plBufLength);
                        chunk = chunk.slice(4 - this._plBufLength);
                        this._plBufLength = 0;
                        this._packetLength = this._plBuf.readUInt32LE(0);
                    }
                    else {
                        chunk.copy(this._plBuf, this._plBufLength);
                        this._plBufLength += chunk.byteLength;
                        return;
                    }
                }
                else {
                    if (chunk.length >= 4) {
                        this._packetLength = chunk.readUInt32LE(0);
                        chunk = chunk.slice(4);
                        this._plBufLength = 0;
                    }
                    else {
                        chunk.copy(this._plBuf, this._plBufLength);
                        this._plBufLength = chunk.byteLength;
                        return;
                    }
                }
                if (this._packetLength > C.MAX_PACKET_SIZE) { // Maximum packet size is 64M
                    this.onProtocolError(new GE.E_PACKET_TOO_LARGE());
                    this.reset();
                }
                if (this._buf.byteLength < this._packetLength) {
                    this._buf = Buffer.allocUnsafe(this._packetLength);
                }
            }
        }
    }
}
function createDecoder() {
    return new Decoder();
}
exports.createDecoder = createDecoder;
//# sourceMappingURL=Decoder.js.map