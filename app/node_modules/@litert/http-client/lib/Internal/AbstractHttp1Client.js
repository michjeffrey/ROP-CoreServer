"use strict";
/**
 * Copyright 2023 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractHttp1Client = void 0;
const C = require("../Common");
const AbstractProtocolClient_1 = require("./AbstractProtocolClient");
const stream_1 = require("stream");
class AbstractHttp1Client extends AbstractProtocolClient_1.AbstractProtocolClient {
    constructor(_) {
        super();
        this._ = _;
    }
    _processRequest(theReq, opts, hasReqEntity) {
        if (hasReqEntity) {
            if (opts.data instanceof stream_1.Readable) {
                opts.data.pipe(theReq);
            }
            else {
                theReq.end(opts.data);
            }
            delete opts.data;
        }
        else {
            theReq.end();
        }
        return new Promise((resolve, reject) => {
            theReq.on('response', (resp) => {
                if (opts.timeout) {
                    resp.setTimeout(opts.timeout, () => resp.destroy(new Error('timeout')));
                }
                resolve({
                    'protocol': opts.connectionOptions.createConnection ? C.EProtocol.HTTPS_1 : C.EProtocol.HTTP_1,
                    'gzip': opts.gzip,
                    'deflate': opts.deflate,
                    'stream': resp,
                    'headers': resp.headers,
                    'statusCode': resp.statusCode,
                    'contentLength': resp.headers[C.Headers.CONTENT_LENGTH_H1] === undefined ?
                        Infinity : parseInt(resp.headers[C.Headers.CONTENT_LENGTH_H1]),
                    'noEntity': !this._.hasEntity(opts.method),
                });
            }).once('error', (e) => {
                theReq.removeAllListeners('error');
                theReq.removeAllListeners('response');
                theReq.removeAllListeners('close');
                reject(e);
            });
        });
    }
}
exports.AbstractHttp1Client = AbstractHttp1Client;
//# sourceMappingURL=AbstractHttp1Client.js.map