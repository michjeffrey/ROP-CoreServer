"use strict";
/**
 * Copyright 2023 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.H1SClient = void 0;
const $H1S = require("https");
const AbstractHttp1Client_1 = require("./AbstractHttp1Client");
const $Crypto = require("crypto");
class H1SClient extends AbstractHttp1Client_1.AbstractHttp1Client {
    constructor(helper) {
        super(helper);
        this._agents = {};
    }
    close() {
        for (const k in this._agents) {
            this._agents[k].destroy();
        }
        this._agents = {};
    }
    _getAgent(opts, key = this._getAuthroityKey(opts)) {
        if (this._agents[key]) {
            return this._agents[key];
        }
        return this._agents[key] = new $H1S.Agent({
            'maxSockets': opts.maxConnections,
            'keepAlive': opts.keepAlive,
            'keepAliveMsecs': opts.keepAliveTimeout,
            ...opts.connectionOptions
        });
    }
    async request(opts, tlsSocket, key) {
        if (opts.concurrency !== Infinity) {
            /**
             * Overwrite maxConnections when concurrency is set.
             */
            opts.maxConnections = opts.concurrency;
        }
        const agent = this._getAgent(opts, key);
        const REQ_ENTITY = this._.requireEntity(opts.method);
        if (opts.connectionOptions.remoteHost) {
            opts.connectionOptions.severname = opts.url.hostname;
        }
        if (!opts.headers['host']) {
            opts.headers['host'] = opts.url.hostname;
        }
        const h1sOpts = {
            'host': opts.connectionOptions.remoteHost ?? opts.url.hostname,
            'port': opts.url.port,
            'method': opts.method,
            'path': this._.buildPath(opts.url),
            'headers': opts.headers,
            'agent': agent,
            'servername': opts.url.hostname,
            'minVersion': `TLSv${opts.minTLSVersion}`
        };
        if (opts.timeout) {
            h1sOpts.timeout = opts.timeout;
        }
        if (tlsSocket) {
            h1sOpts.createConnection = () => tlsSocket;
        }
        if (opts.localAddress) {
            h1sOpts.localAddress = opts.localAddress;
        }
        if (REQ_ENTITY) {
            /**
             * Here will validate the type of entity.
             */
            this._preprocessEntity(opts);
        }
        if (opts.ca) {
            h1sOpts.ca = opts.ca;
        }
        const req = $H1S.request({
            ...h1sOpts,
            ...opts.connectionOptions,
            ...opts.requestOptions
        });
        if (tlsSocket) {
            /**
             * The custom TLS socket will not delegated by HTTPS.Agent, so that it
             * must be released manually.
             */
            req.on('close', () => tlsSocket.destroy());
        }
        return this._processRequest(req, opts, REQ_ENTITY);
    }
    _getAuthroityKey(opts) {
        return `${this._.getAuthroity(opts.url)}/connections/${opts.maxConnections}`;
    }
    getAuthorityKey(opts) {
        if (opts.ca) {
            const hasher = $Crypto.createHash('md5');
            hasher.update(`${this._.getAuthroity(opts.url)}/tls_v${opts.minTLSVersion}/la:${opts.localAddress}/conns:${opts.maxConnections}/ca:`);
            hasher.end(opts.ca);
            return hasher.digest('base64');
        }
        return `${this._.getAuthroity(opts.url)}/rh:${opts.connectionOptions.remoteHost ?? opts.url.hostname}/tls_v${opts.minTLSVersion}/la:${opts.localAddress}/conns:${opts.maxConnections}`;
    }
}
exports.H1SClient = H1SClient;
//# sourceMappingURL=H1SClient.js.map