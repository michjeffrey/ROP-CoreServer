"use strict";
/**
 * Copyright 2023 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.H1Client = void 0;
const $H1 = require("http");
const AbstractHttp1Client_1 = require("./AbstractHttp1Client");
class H1Client extends AbstractHttp1Client_1.AbstractHttp1Client {
    constructor(helper) {
        super(helper);
        this._agents = {};
    }
    close() {
        for (const k in this._agents) {
            this._agents[k].destroy();
        }
        this._agents = {};
    }
    _getAgent(opts, key = this.getAuthorityKey(opts)) {
        if (this._agents[key]) {
            return this._agents[key];
        }
        return this._agents[key] = new $H1.Agent({
            'maxSockets': opts.maxConnections,
            'keepAlive': opts.keepAlive,
            'keepAliveMsecs': opts.keepAliveTimeout,
            ...opts.connectionOptions
        });
    }
    async request(opts) {
        if (opts.concurrency !== Infinity) {
            /**
             * Overwrite maxConnections when concurrency is set.
             */
            opts.maxConnections = opts.concurrency;
        }
        const agent = this._getAgent(opts);
        const REQ_ENTITY = this._.requireEntity(opts.method);
        if (REQ_ENTITY) {
            /**
             * Here will validate the type of entity.
             */
            this._preprocessEntity(opts);
        }
        if (!opts.headers['host']) {
            opts.headers['host'] = opts.url.hostname;
        }
        const h1Opts = {
            host: opts.connectionOptions.remoteHost ?? opts.url.hostname,
            port: opts.url.port,
            method: opts.method,
            path: this._.buildPath(opts.url),
            headers: opts.headers,
            agent
        };
        if (opts.timeout) {
            h1Opts.timeout = opts.timeout;
        }
        if (opts.localAddress) {
            h1Opts.localAddress = opts.localAddress;
        }
        return this._processRequest($H1.request({
            ...h1Opts,
            ...opts.connectionOptions,
            ...opts.requestOptions
        }), opts, REQ_ENTITY);
    }
    getAuthorityKey(opts) {
        return `${this._.getAuthroity(opts.url)}/rh:${opts.connectionOptions.remoteHost ?? opts.url.hostname}/la:${opts.localAddress}/conns:${opts.maxConnections}`;
    }
}
exports.H1Client = H1Client;
//# sourceMappingURL=H1Client.js.map