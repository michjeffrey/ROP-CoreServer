"use strict";
/*
   +----------------------------------------------------------------------+
   | LiteRT HTTP.js Library                                               |
   +----------------------------------------------------------------------+
   | Copyright (c) 2018 Fenying Studio                                    |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.0 of the Apache license,    |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | https://github.com/litert/http.js/blob/master/LICENSE                |
   +----------------------------------------------------------------------+
   | Authors: Angus Fenying <fenying@litert.org>                          |
   +----------------------------------------------------------------------+
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ServerError;
(function (ServerError) {
    /**
     * The path is not acceptable.
     */
    ServerError[ServerError["INVALID_PATH"] = 4097] = "INVALID_PATH";
    /**
     * Failed to start server.
     */
    ServerError[ServerError["FAILED_TO_START"] = 4098] = "FAILED_TO_START";
    /**
     * Invalid expression of variable.
     */
    ServerError[ServerError["INVALID_VARIABLE_TYPE"] = 4099] = "INVALID_VARIABLE_TYPE";
    /**
     * The received body exceed max length restriction.
     */
    ServerError[ServerError["EXCEED_MAX_BODY_LENGTH"] = 4100] = "EXCEED_MAX_BODY_LENGTH";
    /**
     * The content data is unparsable by the parser of determined type.
     */
    ServerError[ServerError["UNACCEPTABLE_CONTENT_TYPE"] = 4101] = "UNACCEPTABLE_CONTENT_TYPE";
    /**
     * Response headers were already sent.
     */
    ServerError[ServerError["HEADERS_ALREADY_SENT"] = 4102] = "HEADERS_ALREADY_SENT";
    /**
     * Server is not started.
     */
    ServerError[ServerError["SERVER_NOT_WORKING"] = 4103] = "SERVER_NOT_WORKING";
    /**
     * Timeout when reading data from request.
     */
    ServerError[ServerError["READING_DATA_TIMEOUT"] = 4104] = "READING_DATA_TIMEOUT";
    /**
     * The connection was closed.
     */
    ServerError[ServerError["CONNECTION_CLOESD"] = 4105] = "CONNECTION_CLOESD";
    /**
     * Response has been closed.
     */
    ServerError[ServerError["RESPONSE_ALREADY_CLOSED"] = 4106] = "RESPONSE_ALREADY_CLOSED";
    /**
     * The next callback is not called inside middleware.
     */
    ServerError[ServerError["MISSING_CALLING_NEXT"] = 4107] = "MISSING_CALLING_NEXT";
    /**
     * Cannot start a mounted server.
     */
    ServerError[ServerError["START_MOUNTED_SERVER"] = 4108] = "START_MOUNTED_SERVER";
    /**
     * Cannot shutdown a mounted server.
     */
    ServerError[ServerError["SHUTDOWN_MOUNTED_SERVER"] = 4109] = "SHUTDOWN_MOUNTED_SERVER";
    /**
     * The host has been added already.
     */
    ServerError[ServerError["DUPLICATED_HOST"] = 4110] = "DUPLICATED_HOST";
    /**
     * The host has not been added yet.
     */
    ServerError[ServerError["NON_EXISTENT_HOST"] = 4111] = "NON_EXISTENT_HOST";
    /**
     * A server must contains SSL/TLS certificate in a secure host.
     */
    ServerError[ServerError["REQUIRE_SSL_CERTIFICATE"] = 4112] = "REQUIRE_SSL_CERTIFICATE";
    /**
     * The path of controllers/middlewares doesn't exist.
     */
    ServerError[ServerError["PATH_NOT_EXIST"] = 4113] = "PATH_NOT_EXIST";
})(ServerError || (ServerError = {}));
exports.default = ServerError;
//# sourceMappingURL=Errors.js.map