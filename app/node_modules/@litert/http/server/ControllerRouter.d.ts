import "reflect-metadata";
import * as Core from "@litert/core";
import * as Abstract from "./Abstract";
export declare function Route(method: Abstract.HTTPMethod, path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Get(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Post(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Put(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Patch(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Delete(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Head(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function Options(path: string | RegExp | Array<string | RegExp>, data?: Core.IDictionary<any>): Core.MethodDecorator;
export declare function NotFound(): Core.MethodDecorator;
export interface MiddlewareRegister {
    /**
     * Use a middleware, without PATH and METHOD filter.
     *
     * @param method The method to be handled by middleware.
     * @param path The path to be handled by middleware.
     * @param priority The order priority of middleware, default to be 10.
     */
    (method: Abstract.HTTPMethod | Abstract.HTTPMethod[], path: string | RegExp | Array<string | RegExp>, priority?: number): Core.MethodDecorator;
    /**
     * Use a middleware, with a METHOD filter.
     *
     * @param method The method to be handled by middleware.
     * @param priority The order priority of middleware, default to be 10.
     */
    (method: Abstract.HTTPMethod | Abstract.HTTPMethod[], priority?: number): Core.MethodDecorator;
    /**
     * Use a middleware, with a PATH filter.
     *
     * @param path The path to be handled by middleware.
     * @param priority The order priority of middleware, default to be 10.
     */
    (path: string | RegExp | Array<string | RegExp>, priority?: number): Core.MethodDecorator;
    /**
     * Use a middleware, without any filter.
     *
     * @param priority The order priority of middleware, default to be 10.
     */
    (priority?: number): Core.MethodDecorator;
}
/**
 * Set and configure a static method as a middleware.
 */
export declare let Middleare: MiddlewareRegister;
export declare function createControllerRouter<CT extends Abstract.RequestContext = Abstract.RequestContext>(): Abstract.ControllerRouter<CT>;
