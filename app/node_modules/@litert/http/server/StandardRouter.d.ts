import { IDictionary } from "@litert/core";
import { RequestMiddleware, StandardRouter, RouteRule, HTTPMethod, RequestHandler, HTTPMethodDictionary, RouteResult, RequestContext } from "./Abstract";
export declare class Router<CT extends RequestContext = RequestContext> implements StandardRouter<CT> {
    protected _stringRouter: HTTPMethodDictionary<IDictionary<RouteRule<RequestHandler<CT>>>>;
    protected _regexpRouter: HTTPMethodDictionary<Array<RouteRule<RequestHandler<CT>>>>;
    private _middlewares;
    protected _notFoundHandler: RequestHandler<CT>;
    constructor();
    private _isSmartRule(path);
    private _setupMiddlewareRule(middleware, path);
    use(...args: any[]): this;
    get(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    post(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    put(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    patch(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    delete(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    options(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    head(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    trace(path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    protected _checkPath(path: string): void;
    register(method: HTTPMethod | HTTPMethod[], path: string | RegExp | Array<string | RegExp>, handler: RequestHandler<CT>, data?: IDictionary<any>): this;
    protected _addRegExpRule(method: HTTPMethod, rule: RouteRule<any>): void;
    route(method: HTTPMethod, path: string, context: RequestContext): RouteResult;
    protected _filterMiddlewares(method: HTTPMethod, path: string, context: RequestContext): RequestMiddleware[];
    notFound(handler: RequestHandler<CT>): this;
}
export declare function createStandardRouter<CT extends RequestContext = RequestContext>(): StandardRouter<CT>;
export default createStandardRouter;
