/// <reference types="node" />
import * as Abstracts from "./Abstract";
import * as events from "events";
import "./Response";
import "./Request";
import { kStatus, kServer } from "./Internal";
export declare abstract class AbstractServer extends events.EventEmitter implements Abstracts.Server {
    private [kStatus];
    private [kServer];
    protected _router: Abstracts.Router;
    protected _mounted: boolean;
    protected _opts: Abstracts.ServerOptions;
    setMounted(): void;
    setPlugin(key: string, plugin: any): AbstractServer;
    hasPlugin(key: string): boolean;
    constructor(opts: Abstracts.CreateServerOptions);
    readonly host: string;
    readonly port: number;
    readonly backlog: number;
    readonly status: Abstracts.ServerStatus;
    readonly ssl: Abstracts.SSLConfig;
    static __getMinSSLVersionFlag(minVer: string): number;
    shutdown(): Promise<void>;
    protected static _createListener(opts: Abstracts.CreateServerOptions, server: Abstracts.Server, params: any, requestCode: string): any;
    protected _getRequestCode(): string;
    protected _getRequestParams(): any;
    start(): Promise<void>;
    /**
     * The real handler callback for a HTTP request.
     *
     * @param request The HTTP session request controller
     * @param response The HTTP session response controller
     */
    __requestEntry(context: Abstracts.RequestContext): Promise<void>;
    __execute(middlewares: Abstracts.RequestMiddleware[], handler: Abstracts.RequestHandler, context: Abstracts.RequestContext, index?: number): Promise<void>;
}
export default AbstractServer;
