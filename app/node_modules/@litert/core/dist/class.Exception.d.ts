/**
 * This class provides the default exception class for LiteRT.
 */
export declare abstract class Exception {
    protected _errno: number;
    protected _message: string;
    protected _type: string;
    protected _origin: any;
    protected _trace: string[];
    /**
     * The data needs to be carried by exception.
     */
    readonly origin: any;
    /**
     * The trace of Exception.
     *
     * This is an array contains the calling stacks from the new operation of
     * an exception.
     */
    readonly trace: string[];
    /**
     * The type of the exception.
     */
    readonly type: string;
    /**
     * The code to identify the type of this exception.
     */
    readonly error: number;
    /**
     * The description about this exception.
     */
    readonly message: string;
    /**
     * Constructor of an exception.
     *
     * @param error The code to identify the type of this exception.
     * @param message The description about this exception.
     * @param origin The data needs to be carried by exception.
     */
    constructor(error: number, message: string, origin?: any);
    /**
     * @override
     */
    toString(): string;
    /**
     * Convert this exception into JSON string.
     */
    toJSON(): string;
    /**
     * THe method helps determine if an error object is of LiteRT's exception.
     *
     * @param e     The error object to be check.
     * @param type  The type of exception to be ensured.
     */
    static is(e: any, type?: string): e is Exception;
}
