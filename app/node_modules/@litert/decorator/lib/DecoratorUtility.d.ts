/**
 * Copyright 2023 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as C from './Common';
export declare class DecoratorUtility implements C.IDecoratorUtility {
    private readonly _staticProperties;
    private readonly _staticMethods;
    private readonly _memberProperties;
    private readonly _memberMethods;
    private _hookNativeReflectMetadata;
    private _bakOfMetadata;
    private _bakOfDefineMetadata;
    createGeneralDecorator(processors: C.IGeneralDecoratorProcessorSet): C.IGeneralDecorator;
    isClassConstructor<T extends C.IClassCtor>(target: unknown): target is T;
    isClassPrototype<T extends C.IPrototype>(target: unknown): target is T;
    isInsideClassDecorator(args: any[]): args is Parameters<C.IClassDecorator>;
    isInsideConstructorParameterDecorator(args: any[]): args is Parameters<C.IConstructorParameterDecorator>;
    isInsideMethodParameterDecorator(args: any[]): args is Parameters<C.IMethodParameterDecorator>;
    isInsideMethodDecorator(args: any[]): args is Parameters<C.IMethodDecorator>;
    isInsideAccessorDecorator(args: any[]): args is Parameters<C.IMethodDecorator>;
    isInsidePropertyDecorator(args: any[]): args is Parameters<C.IPropertyDecorator>;
    isInsideStaticMethodParameterDecorator(args: any[]): args is Parameters<C.IStaticMethodParameterDecorator>;
    isInsideStaticMethodDecorator(args: any[]): args is Parameters<C.IStaticMethodDecorator>;
    isInsideStaticAccessorDecorator(args: any[]): args is Parameters<C.IStaticMethodDecorator>;
    isInsideStaticPropertyDecorator(args: any[]): args is Parameters<C.IStaticPropertyDecorator>;
    createClassDecorator(decorator: C.IClassDecoratorProcessor): C.IClassDecorator;
    createConstructorParameterDecorator(decorator: C.IConstructorParameterDecoratorProcessor): C.IConstructorParameterDecorator;
    createMethodParameterDecorator(decorator: C.IMethodParameterDecoratorProcessor): C.IMethodParameterDecorator;
    createMethodDecorator(decorator: C.IMethodDecoratorProcessor): C.IMethodDecorator;
    createAccessorDecorator(decorator: C.IAccessorDecoratorProcessor): C.IMethodDecorator;
    createPropertyDecorator(decorator: C.IPropertyDecoratorProcessor): C.IPropertyDecorator;
    createStaticMethodParameterDecorator(decorator: C.IStaticMethodParameterDecoratorProcessor): C.IStaticMethodParameterDecorator;
    createStaticMethodDecorator(decorator: C.IStaticMethodDecoratorProcessor): C.IStaticMethodDecorator;
    createStaticAccessorDecorator(decorator: C.IStaticAccessorDecoratorProcessor): C.IStaticMethodDecorator;
    createStaticPropertyDecorator(decorator: C.IStaticPropertyDecoratorProcessor): C.IStaticPropertyDecorator;
    getClassOfObject(obj: C.IObject): C.IClassCtor;
    getParentClass(cls: C.IClassCtor): C.IClassCtor | null;
    hasParentClass(cls: C.IClassCtor): boolean;
    private _registerMemberProperty;
    private _registerMemberMethod;
    private _registerStaticProperty;
    private _registerStaticMethod;
    isAccessor(ctor: C.IClassCtor, name: symbol | string): boolean;
    isStaticAccessor(ctor: C.IClassCtor, name: symbol | string): boolean;
    isMethod(ctor: C.IClassCtor, name: symbol | string): boolean;
    isStaticMethod(ctor: C.IClassCtor, name: symbol | string): boolean;
    getOwnMethodNames(target: C.IClassCtor): Array<string | symbol>;
    getOwnStaticMethodNames(target: C.IClassCtor): Array<string | symbol>;
    getOwnPropertyNames(target: C.IClassCtor): Array<string | symbol>;
    getOwnStaticPropertyNames(target: C.IClassCtor): Array<string | symbol>;
    isHookNativeReflectMetadata(): boolean;
    hookNativeReflectMetadata(enabled?: boolean): void;
    composite(decorators: any[]): any;
}
//# sourceMappingURL=DecoratorUtility.d.ts.map