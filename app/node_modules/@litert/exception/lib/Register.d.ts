/**
 * Copyright 2022 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type * as C from './Common';
/**
 * Built-in exception: The type of new exception definition is not defined.
 */
export declare const E_TYPE_NOT_FOUND: C.IExceptionConstructor;
/**
 * Built-in exception: The type of new exception definition is malformed.
 */
export declare const E_DUP_TYPE: C.IExceptionConstructor;
/**
 * Built-in exception: The type of new exception definition is malformed.
 */
export declare const E_MALFORMED_TYPE: C.IExceptionConstructor;
/**
 * Built-in exception: The module name of new exception registry is malformed.
 */
export declare const E_MALFORMED_MODULE: C.IExceptionConstructor;
/**
 * Built-in exception: The name of new exception is malformed.
 */
export declare const E_MALFORMED_NAME: C.IExceptionConstructor;
/**
 * Built-in exception: The name of new exception has been used already.
 */
export declare const E_DUP_EXCEPTION_NAME: C.IExceptionConstructor;
/**
 * Built-in exception: The code of new exception has been used already.
 */
export declare const E_DUP_EXCEPTION_CODE: C.IExceptionConstructor;
/**
 * Create a new exception registry object.
 * @param opts  The options of new registry.
 */
export declare function createExceptionRegistry(opts: C.IRegistryOptions): C.IRegistry;
/**
 * Helper function that identifies whether a value is a determined exception object.
 * @param e         The value to be identified.
 * @param type      The expected exception type, optional.
 * @param name      The expected exception name, optional.
 * @param module    The expected exception module name, optional.
 */
export declare function identify(e: unknown, type?: string, name?: string, module?: string): e is C.IException;
/**
 * Helper function that identifies whether a value is a determined exception object.
 * @param e             The value to be identified.
 * @param exceptionCtor The constructor of expected exception.
 */
export declare function equals(e: unknown, exceptionCtor: C.IExceptionConstructor): e is C.IException;
//# sourceMappingURL=Register.d.ts.map