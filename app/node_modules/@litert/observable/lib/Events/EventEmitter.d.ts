/**
 * Copyright 2020 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as C from './Common';
declare const PRIV_PROP_EVENT_SLOTS: unique symbol;
declare const PRIV_PROP_CONFIG: unique symbol;
export declare class EventEmitter<T extends C.ICallbackDefinitions> implements C.IEmitter<T> {
    private [PRIV_PROP_CONFIG];
    private [PRIV_PROP_EVENT_SLOTS];
    constructor(config?: Partial<C.IConfiguration>);
    addListener<TEvent extends keyof T>(event: TEvent, callback: T[TEvent]): this;
    on<TEvent extends keyof T>(event: TEvent, callback: T[TEvent]): this;
    addOnceListener<TEvent extends keyof T>(event: TEvent, callback: T[TEvent]): this;
    once<TEvent extends keyof T>(event: TEvent, callback: T[TEvent]): this;
    eventNames(): Array<keyof T>;
    hasListener<TEvent extends keyof T>(event: TEvent, callback: T[TEvent]): boolean;
    listeners<TEvent extends keyof T>(event: TEvent): Array<T[TEvent]>;
    listenerCount<TEvent extends keyof T>(event: TEvent): number;
    off<TEvent extends keyof T>(event: TEvent, callback?: T[TEvent]): number;
    removeListener<TEvent extends keyof T>(event: TEvent, callback?: T[TEvent]): number;
    configEvent(...args: [keyof T, Partial<C.IConfiguration>] | [Partial<C.IConfiguration>]): this;
    emit<TEvent extends keyof T>(event: TEvent, ...args: Parameters<T[TEvent]>): boolean;
}
export {};
//# sourceMappingURL=EventEmitter.d.ts.map