"use strict";
/**
 * Copyright 2020 Angus.Fenying <fenying@litert.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFilterManager = void 0;
const E = require("./Errors");
const SECRET_DATA = new WeakMap();
class FilterManager {
    constructor() {
        SECRET_DATA.set(this, { filters: {} });
    }
    register(name, key, callback, priority = 0) {
        const filters = SECRET_DATA.get(this).filters;
        if (!Array.isArray(name)) {
            name = [name];
        }
        for (const s of name) {
            if (!filters[s]) {
                filters[s] = [];
            }
            if (filters[s].find((v) => v.key === key)) {
                throw new E.E_DUP_FILTER_FUNCTION({ metadata: { name: s, key } });
            }
            filters[s].push({
                key,
                fn: callback,
                priority
            });
            filters[s] = filters[s].sort((a, b) => a.priority - b.priority);
        }
        return this;
    }
    unregister(name, key) {
        const filters = SECRET_DATA.get(this).filters;
        if (!filters[name]) {
            return this;
        }
        const index = filters[name].findIndex((v) => v.key === key);
        if (index !== -1) {
            filters[name].splice(index, 1);
        }
        return this;
    }
    unregisterAll(name) {
        const filters = SECRET_DATA.get(this).filters;
        delete filters[name];
        return this;
    }
    async filter(name, value, ...args) {
        const filters = SECRET_DATA.get(this).filters;
        const items = filters[name];
        if (!items) {
            return value;
        }
        for (const filter of items) {
            const v = filter.fn(value, ...args);
            value = v instanceof Promise ? await v : v;
        }
        return value;
    }
    getFilterList() {
        const filters = SECRET_DATA.get(this).filters;
        return [
            ...Object.getOwnPropertySymbols(filters),
            ...Object.getOwnPropertyNames(filters)
        ];
    }
    getFunctionList(name) {
        const filters = SECRET_DATA.get(this).filters;
        return filters[name].map((v) => v.key);
    }
}
function createFilterManager() {
    return new FilterManager();
}
exports.createFilterManager = createFilterManager;
//# sourceMappingURL=FilterManager.js.map