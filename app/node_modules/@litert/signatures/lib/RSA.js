"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSigner = exports.verifyStream = exports.signStream = exports.verify = exports.sign = exports.getSupportedAlgorithms = void 0;
const $Crypto = __importStar(require("crypto"));
const $Constants = __importStar(require("constants"));
function getSupportedAlgorithms() {
    return [
        'sha1', 'md5', 'ripemd160',
        'sha224', 'sha256', 'sha384', 'sha512',
        'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512',
    ];
}
exports.getSupportedAlgorithms = getSupportedAlgorithms;
function sign(algo, privateKey, message, opts) {
    const hasher = $Crypto.createSign(algo);
    return hasher.update(message).sign({
        'key': privateKey,
        'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase,
        'padding': (opts === null || opts === void 0 ? void 0 : opts.padding) === 'pss-mgf1' ?
            $Constants.RSA_PKCS1_PSS_PADDING :
            $Constants.RSA_PKCS1_PADDING
    });
}
exports.sign = sign;
function verify(algo, publicKey, message, signature, opts) {
    const hasher = $Crypto.createVerify(algo);
    return hasher.update(message).verify({
        'key': publicKey,
        'padding': (opts === null || opts === void 0 ? void 0 : opts.padding) === 'pss-mgf1' ?
            $Constants.RSA_PKCS1_PSS_PADDING :
            $Constants.RSA_PKCS1_PADDING
    }, signature);
}
exports.verify = verify;
function signStream(algo, privateKey, message, opts) {
    const hasher = $Crypto.createSign(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            try {
                resolve(hasher.sign({
                    'key': privateKey,
                    'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase,
                    'padding': (opts === null || opts === void 0 ? void 0 : opts.padding) === 'pss-mgf1' ?
                        $Constants.RSA_PKCS1_PSS_PADDING :
                        $Constants.RSA_PKCS1_PADDING
                }));
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.signStream = signStream;
function verifyStream(algo, publicKey, message, signature, opts) {
    const hasher = $Crypto.createVerify(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            try {
                resolve(hasher.verify({
                    'key': publicKey,
                    'padding': (opts === null || opts === void 0 ? void 0 : opts.padding) === 'pss-mgf1' ?
                        $Constants.RSA_PKCS1_PSS_PADDING :
                        $Constants.RSA_PKCS1_PADDING
                }, signature));
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.verifyStream = verifyStream;
function createSigner(algo, publicKey, privateKey, opts) {
    const ret = {};
    Object.defineProperties(ret, {
        sign: {
            writable: false,
            configurable: false,
            value: (msg) => sign(algo, privateKey, msg, opts)
        },
        signStream: {
            writable: false,
            configurable: false,
            value: (msg) => signStream(algo, privateKey, msg, opts)
        },
        verify: {
            writable: false,
            configurable: false,
            value: (msg, sign) => verify(algo, publicKey, msg, sign, opts)
        },
        verifyStream: {
            writable: false,
            configurable: false,
            value: (msg, sign) => verifyStream(algo, publicKey, msg, sign, opts)
        },
        hashAlgorithm: {
            writable: false,
            configurable: false,
            value: algo
        },
        signAlgorithm: {
            writable: false,
            configurable: false,
            value: 'ecdsa'
        }
    });
    return ret;
}
exports.createSigner = createSigner;
//# sourceMappingURL=RSA.js.map