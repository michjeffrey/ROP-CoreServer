"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeP1363Enabled = exports.enableNativeP1363 = exports.hasNativeP1363Support = exports.createSigner = exports.verifyStreamWithCustomP1363 = exports.verifyStreamWithNativeP1363 = exports.verifyStream = exports.signStreamWithCustomP1363 = exports.signStreamWithNativeP1363 = exports.signStream = exports.verify = exports.sign = exports.p1363ToDER = exports.derToP1363 = exports.getSupportedAlgorithms = void 0;
const $Crypto = __importStar(require("crypto"));
function getSupportedAlgorithms() {
    return [
        'sha1',
        'sha224', 'sha256', 'sha384', 'sha512',
        'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512'
    ];
}
exports.getSupportedAlgorithms = getSupportedAlgorithms;
/**
 * This method helps recover R/S to the DER form, with padding if necessary.
 *
 * @param {Buffer} input The R/S to be recovered.
 */
function ecdsaRecoverRS(input) {
    let start = 0;
    while (input[start] === 0) {
        start++;
    }
    if (input[start] <= 0x7F) {
        return input.slice(start);
    }
    if (start > 0) {
        return input.slice(start - 1);
    }
    const output = Buffer.alloc(input.length + 1);
    input.copy(output, 1);
    output[0] = 0;
    return output;
}
const UINT32_READ_BUFFER = Buffer.alloc(4);
function derReadLength(bf, offset) {
    let length = bf[offset++];
    /**
     * Using long form length if it's larger than 0x7F.
     *
     * @see https://stackoverflow.com/a/47099047
     */
    if (length > 0x7F) {
        const llen = length & 0x7F;
        UINT32_READ_BUFFER.fill(0);
        bf.copy(UINT32_READ_BUFFER, 4 - llen, offset, offset + llen);
        length = UINT32_READ_BUFFER.readUInt32BE(0);
        offset += llen;
    }
    return [length, offset];
}
function removePrependZero(bf) {
    let i = 0;
    for (; i < bf.length && !bf[i]; i++)
        ;
    if (i === bf.length) {
        return bf.slice(0, 1);
    }
    return bf.slice(i);
}
/**
 * This method helps transform signature from DER format to IEEE-P1363 format.
 *
 * @param {Buffer} der  The signature in DER format.
 *
 * @returns {Buffer}  Return the signature in IEEE-P1363 format.
 */
function derToP1363(der) {
    let ctx = [0, 0];
    let [, offset] = derReadLength(der, 1);
    ctx = derReadLength(der, ++offset);
    offset = ctx[1];
    const r = removePrependZero(der.slice(offset, offset + ctx[0]));
    offset += ctx[0];
    ctx = derReadLength(der, ++offset);
    offset = ctx[1];
    const s = removePrependZero(der.slice(offset, offset + ctx[0]));
    if (s.length > r.length) {
        return Buffer.concat([Buffer.alloc(s.length - r.length), r, s]);
    }
    else if (r.length > s.length) {
        return Buffer.concat([r, Buffer.alloc(r.length - s.length), s]);
    }
    return Buffer.concat([r, s]);
}
exports.derToP1363 = derToP1363;
/**
 * This method helps transform signature from DER format to IEEE-P1363 format.
 *
 * @param {Buffer} p1363   The signature in IEEE-P1363 format.
 *
 * @returns {Buffer}  Return the signature in DER format.
 */
function p1363ToDER(p1363) {
    let base = 0;
    const hL = p1363.length / 2;
    /**
     * Prepend a 0x00 byte to R or S if it starts with a byte larger than 0x79.
     *
     * Because a integer starts with a byte larger than 0x79 means negative.
     *
     * @see https://bitcointalk.org/index.php?topic=215205.msg2258789#msg2258789
     */
    const r = ecdsaRecoverRS(p1363.slice(0, hL));
    const s = ecdsaRecoverRS(p1363.slice(hL));
    /**
     * Using long form length if it's larger than 0x7F.
     *
     * @see https://stackoverflow.com/a/47099047
     */
    if (4 + s.length + r.length > 0x7f) {
        base++;
    }
    const der = Buffer.alloc(base + 6 + s.length + r.length);
    if (base) {
        der[1] = 0x81;
    }
    der[0] = 0x30;
    der[base + 1] = 4 + s.length + r.length;
    der[base + r.length + 4] = der[base + 2] = 0x02;
    der[base + r.length + 5] = s.length;
    der[base + 3] = r.length;
    r.copy(der, base + 4);
    s.copy(der, base + 6 + r.length);
    return der;
}
exports.p1363ToDER = p1363ToDER;
let shouldUseNativeP1363 = false;
function signWithNativeP1363(algo, privateKey, message, opts) {
    var _a;
    if (algo === 'sha224' || algo === 'sha3-224') {
        return signWithCustomP1363(algo, privateKey, message, opts);
    }
    const hasher = $Crypto.createSign(algo);
    return hasher.update(message).sign({
        'key': privateKey,
        'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase,
        'dsaEncoding': (_a = opts === null || opts === void 0 ? void 0 : opts.format) !== null && _a !== void 0 ? _a : 'ieee-p1363'
    });
}
function signWithCustomP1363(algo, privateKey, message, opts) {
    const hasher = $Crypto.createSign(algo);
    const ret = hasher.update(message).sign({
        'key': privateKey,
        'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase
    });
    if ((opts === null || opts === void 0 ? void 0 : opts.format) !== 'der') {
        return derToP1363(ret);
    }
    return ret;
}
exports.sign = signWithCustomP1363;
function verifyWithCustomP1363(algo, publicKey, message, signature, opts) {
    const hasher = $Crypto.createVerify(algo);
    if ((opts === null || opts === void 0 ? void 0 : opts.format) !== 'der') {
        signature = p1363ToDER(signature);
    }
    return hasher.update(message).verify(publicKey, signature);
}
function verifyWithNativeP1363(algo, publicKey, message, signature, opts) {
    if (algo === 'sha224' || algo === 'sha3-224') {
        return verifyWithCustomP1363(algo, publicKey, message, signature, opts);
    }
    const hasher = $Crypto.createVerify(algo);
    return hasher.update(message).verify({
        key: publicKey,
        dsaEncoding: opts === null || opts === void 0 ? void 0 : opts.format
    }, signature);
}
exports.verify = verifyWithCustomP1363;
exports.signStream = signStreamWithCustomP1363;
function signStreamWithNativeP1363(algo, privateKey, message, opts) {
    if (algo === 'sha224' || algo === 'sha3-224') {
        return signStreamWithCustomP1363(algo, privateKey, message, opts);
    }
    const hasher = $Crypto.createSign(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            try {
                resolve(hasher.sign({
                    'key': privateKey,
                    'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase,
                    'dsaEncoding': opts === null || opts === void 0 ? void 0 : opts.format
                }));
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.signStreamWithNativeP1363 = signStreamWithNativeP1363;
function signStreamWithCustomP1363(algo, privateKey, message, opts) {
    const hasher = $Crypto.createSign(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            try {
                const ret = hasher.sign({
                    'key': privateKey,
                    'passphrase': opts === null || opts === void 0 ? void 0 : opts.keyPassphrase
                });
                if ((opts === null || opts === void 0 ? void 0 : opts.format) === 'ieee-p1363') {
                    resolve(derToP1363(ret));
                    return;
                }
                resolve(ret);
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.signStreamWithCustomP1363 = signStreamWithCustomP1363;
exports.verifyStream = verifyStreamWithCustomP1363;
function verifyStreamWithNativeP1363(algo, publicKey, message, signature, opts) {
    if (algo === 'sha224' || algo === 'sha3-224') {
        return verifyStreamWithCustomP1363(algo, publicKey, message, signature, opts);
    }
    const hasher = $Crypto.createVerify(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            var _a;
            try {
                resolve(hasher.verify({
                    key: publicKey,
                    dsaEncoding: (_a = opts === null || opts === void 0 ? void 0 : opts.format) !== null && _a !== void 0 ? _a : 'ieee-p1363'
                }, signature));
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.verifyStreamWithNativeP1363 = verifyStreamWithNativeP1363;
function verifyStreamWithCustomP1363(algo, publicKey, message, signature, opts) {
    const hasher = $Crypto.createVerify(algo);
    return new Promise(function (resolve, reject) {
        message.pipe(hasher).on('finish', function () {
            try {
                if ((opts === null || opts === void 0 ? void 0 : opts.format) !== 'der') {
                    signature = p1363ToDER(signature);
                }
                resolve(hasher.verify(publicKey, signature));
            }
            catch (e) {
                reject(e);
            }
        }).once('error', reject);
    });
}
exports.verifyStreamWithCustomP1363 = verifyStreamWithCustomP1363;
function createSigner(algo, publicKey, privateKey, opts) {
    return (function (sign, verify, signStream, verifyStream) {
        const ret = {};
        Object.defineProperties(ret, {
            sign: {
                writable: false,
                configurable: false,
                value: (msg) => sign(algo, privateKey, msg, opts)
            },
            signStream: {
                writable: false,
                configurable: false,
                value: (msg) => signStream(algo, privateKey, msg, opts)
            },
            verify: {
                writable: false,
                configurable: false,
                value: (msg, sign) => verify(algo, publicKey, msg, sign, opts)
            },
            verifyStream: {
                writable: false,
                configurable: false,
                value: (msg, sign) => verifyStream(algo, publicKey, msg, sign, opts)
            },
            hashAlgorithm: {
                writable: false,
                configurable: false,
                value: algo
            },
            signAlgorithm: {
                writable: false,
                configurable: false,
                value: 'ecdsa'
            }
        });
        return ret;
    })(exports.sign, exports.verify, exports.signStream, exports.verifyStream);
}
exports.createSigner = createSigner;
/**
 * Tell if current version of NodeJS supports native IEEE-P1363 formatter.
 */
function hasNativeP1363Support() {
    return parseFloat(process.versions.node.split('.').slice(0, 2).join('.')) > 12.15;
}
exports.hasNativeP1363Support = hasNativeP1363Support;
/**
 * Switch between NodeJS native IEEE-P1363 formater and custom one.
 *
 * > Use custom one by default.
 *
 * @param enabled Set to true to use native formatter.
 *
 * @returns Return true if native formatter is supported and switched successfully.
 */
function enableNativeP1363(enabled = true) {
    if (!hasNativeP1363Support()) {
        return false;
    }
    shouldUseNativeP1363 = enabled;
    if (shouldUseNativeP1363) {
        exports.sign = signWithNativeP1363;
        exports.verify = verifyWithNativeP1363;
        exports.signStream = signStreamWithNativeP1363;
        exports.verifyStream = verifyStreamWithNativeP1363;
    }
    else {
        exports.sign = signWithCustomP1363;
        exports.verify = verifyWithCustomP1363;
        exports.signStream = signStreamWithCustomP1363;
        exports.verifyStream = verifyStreamWithCustomP1363;
    }
    return true;
}
exports.enableNativeP1363 = enableNativeP1363;
/**
 * Tell if it's using NodeJS native IEEE-P1363 formatter or not.
 */
function isNativeP1363Enabled() {
    return shouldUseNativeP1363;
}
exports.isNativeP1363Enabled = isNativeP1363Enabled;
//# sourceMappingURL=ECDSA.js.map