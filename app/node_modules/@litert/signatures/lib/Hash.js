"use strict";
/**
 *  Copyright 2021 Angus.Fenying <fenying@litert.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHasher = exports.hashStream = exports.hash = exports.getSupportedAlgorithms = void 0;
const $Crypto = __importStar(require("crypto"));
function getSupportedAlgorithms() {
    return [
        'blake2b512', 'blake2s256', 'md4', 'md5',
        'md5-sha1', 'mdc2', 'ripemd', 'ripemd160',
        'rmd160', 'sha1', 'sha224', 'sha256',
        'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512',
        'sha384', 'sha512', 'sha512-224', 'sha512-256',
        'sm3', 'whirlpool'
    ];
}
exports.getSupportedAlgorithms = getSupportedAlgorithms;
function hash(algo, message) {
    return $Crypto.createHash(algo).update(message).digest();
}
exports.hash = hash;
function hashStream(algo, message) {
    return new Promise(function (resolve, reject) {
        const hashStream = $Crypto.createHash(algo);
        message.pipe(hashStream).on('finish', () => {
            resolve(hashStream.read());
        }).once('error', reject);
    });
}
exports.hashStream = hashStream;
function createHasher(algo) {
    const ret = {};
    Object.defineProperties(ret, {
        hash: {
            writable: false,
            configurable: false,
            value: (msg) => hash(algo, msg)
        },
        hashStream: {
            writable: false,
            configurable: false,
            value: (msg) => hashStream(algo, msg)
        },
        algorithm: {
            writable: false,
            configurable: false,
            value: algo
        }
    });
    return ret;
}
exports.createHasher = createHasher;
//# sourceMappingURL=Hash.js.map